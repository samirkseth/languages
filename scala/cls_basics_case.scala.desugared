[[syntax trees at end of                   cleanup]] // cls_basics_case.scala
package casetest {
  object CaseTest extends Object {
    def main(args: Array[String]): Unit = {
      val f: casetest.CaseTest$Foo = new casetest.CaseTest$Foo("a", 20);
      scala.this.Predef.println(f.productPrefix());
      scala.this.Predef.println(scala.Int.box(f.productArity()));
      scala.this.Predef.println(f.productElement(0));
      scala.this.Predef.println(f.productElement(1))
    };
    def <init>(): casetest.CaseTest.type = {
      CaseTest.super.<init>();
      ()
    }
  };
  case class CaseTest$Foo extends Object with Product with Serializable {
    <caseaccessor> <paramaccessor> private[this] val a: String = _;
    <stable> <caseaccessor> <accessor> <paramaccessor> def a(): String = CaseTest$Foo.this.a;
    <caseaccessor> <paramaccessor> private[this] val b: Int = _;
    <stable> <caseaccessor> <accessor> <paramaccessor> def b(): Int = CaseTest$Foo.this.b;
    <synthetic> def copy(a: String, b: Int): casetest.CaseTest$Foo = new casetest.CaseTest$Foo(a, b);
    <synthetic> def copy$default$1(): String = CaseTest$Foo.this.a();
    <synthetic> def copy$default$2(): Int = CaseTest$Foo.this.b();
    override <synthetic> def productPrefix(): String = "Foo";
    <synthetic> def productArity(): Int = 2;
    <synthetic> def productElement(x$1: Int): Object = {
      case <synthetic> val x1: Int = x$1;
      (x1: Int) match {
        case 0 => CaseTest$Foo.this.a()
        case 1 => scala.Int.box(CaseTest$Foo.this.b())
        case _ => throw new IndexOutOfBoundsException(scala.Int.box(x$1).toString())
      }
    };
    override <synthetic> def productIterator(): Iterator = runtime.this.ScalaRunTime.typedProductIterator(CaseTest$Foo.this);
    <synthetic> def canEqual(x$1: Object): Boolean = x$1.$isInstanceOf[casetest.CaseTest$Foo]();
    override <synthetic> def hashCode(): Int = {
      <synthetic> var acc: Int = -889275714;
      acc = Statics.this.mix(acc, Statics.this.anyHash(CaseTest$Foo.this.a()));
      acc = Statics.this.mix(acc, CaseTest$Foo.this.b());
      Statics.this.finalizeHash(acc, 2)
    };
    override <synthetic> def toString(): String = ScalaRunTime.this._toString(CaseTest$Foo.this);
    override <synthetic> def equals(x$1: Object): Boolean = CaseTest$Foo.this.eq(x$1).||({
  case <synthetic> val x1: Object = x$1;
  case5(){
    if (x1.$isInstanceOf[casetest.CaseTest$Foo]())
      matchEnd4(true)
    else
      case6()
  };
  case6(){
    matchEnd4(false)
  };
  matchEnd4(x: Boolean){
    x
  }
}.&&({
      <synthetic> val Foo$1: casetest.CaseTest$Foo = x$1.$asInstanceOf[casetest.CaseTest$Foo]();
      CaseTest$Foo.this.a().==(Foo$1.a()).&&(CaseTest$Foo.this.b().==(Foo$1.b())).&&(Foo$1.canEqual(CaseTest$Foo.this))
    }));
    def <init>(a: String, b: Int): casetest.CaseTest$Foo = {
      CaseTest$Foo.this.a = a;
      CaseTest$Foo.this.b = b;
      CaseTest$Foo.super.<init>();
      scala.Product$class./*Product$class*/$init$(CaseTest$Foo.this);
      ()
    }
  };
  <synthetic> object CaseTest$Foo extends scala.runtime.AbstractFunction2 with Serializable {
    final override <synthetic> def toString(): String = "Foo";
    case <synthetic> def apply(a: String, b: Int): casetest.CaseTest$Foo = new casetest.CaseTest$Foo(a, b);
    case <synthetic> def unapply(x$0: casetest.CaseTest$Foo): Option = if (x$0.==(null))
      scala.this.None
    else
      new Some(new Tuple2(x$0.a(), scala.Int.box(x$0.b())));
    <synthetic> private def readResolve(): Object = casetest.CaseTest$Foo;
    case <synthetic> <bridge> <artifact> def apply(v1: Object, v2: Object): Object = CaseTest$Foo.this.apply(v1.$asInstanceOf[String](), scala.Int.unbox(v2));
    def <init>(): casetest.CaseTest$Foo.type = {
      CaseTest$Foo.super.<init>();
      ()
    }
  }
}

